{
  "name": "Google Oauth 2",
  "tagline": "Javascript",
  "body": "# Google-OAuth2\r\n\r\nis a library designed to make working with Google's Oauth2 API's more bearable.<br/>\r\ntaken from [treygriffith](https://github.com/treygriffith/google-oauth2)\r\n\r\nAs of now, it only supports one API, contacts, out of the box, but adding additional API's, either on the fly or permanently, is quite easy.\r\n\r\nUSAGE\r\n------\r\n```javascript\r\nvar oauth2 = new google_oauth2(MY_CLIENT_ID [, options]);\r\n\r\noauth2.authenticate(); //sends the user to the Google authorization endpoint\r\n\r\noauth2.authResponse(function(error, access_token) { //extract the access token\r\n\tif(access_token) {\r\n\t\t//execute some code here\r\n\t} else if(error) {\r\n\t\t//a response was attempted, but an error occurred\r\n\t} else {\r\n\t\t//there was nothing in the url fragment, in all likelihood, this was not a response to authentication\r\n\t}\r\n});\r\n\r\noauth2.query(api [, options], function(error, results) {\r\n\t// execute some code on the returned values\r\n});\r\n```\r\n\r\n\r\n---\r\n# google-oauther\r\n[clalimarmo](https://github.com/clalimarmo/google-oauther)\r\n\r\nSimple Google OAuth2 module, for use in single page, client-side only\r\napplications.  It opens a popup window to request permission, and stores the\r\nauth token returned by Google.\r\n\r\n## Usage\r\n\r\n    var authenticator = require('google-oauther');\r\n\r\n    authenticator.onAuthenticate(function(auth) {\r\n      //stuff to do once the authenticator has authenticated user's profile info\r\n      //(The auth parameter passed to the callback the authenticator, itself)\r\n    });\r\n\r\n    authenticator.run({\r\n      scope: ['https://www.googleapis.com/auth/devstorage.read_write'],\r\n      clientID: 'your-google-oauth2-client-id',\r\n      tokenExpirationBuffer: 60000\r\n    });\r\n\r\n## Configuration\r\n\r\nRequired:\r\n\r\n  * *scope* - the permissions to request from google\r\n  * *clientID* - your google oauth2 client id\r\n\r\nOptional:\r\n\r\n  * *tokenExpirationBuffer* - number of milliseconds before the token actually expires,\r\n    after which the authenticator will consider the token expired. Useful for getting a\r\n    token, or preventing users from attempting unauthenticated requests, before the\r\n    token expires.\r\n\r\n## Methods\r\n\r\n### onAuthenticate\r\n\r\nSpecify behavior that should occur once the user grants the requested\r\npermissions. Do this before you call `run`\r\n\r\n### run\r\n\r\nRequests authentication from the user, and whatever permissions you specify\r\nwith the `scope` parameter.\r\n\r\n### user\r\n\r\nReturns the user profile information gleaned from an authenticated request to\r\nhttps://www.googleapis.com/plus/v1/people/me\r\n\r\n### token\r\n\r\nReturns the auth token. Useful for subsequent requests to other Google APIs.\r\n\r\n### reauthenticate\r\n\r\nDoes the same thing as run.\r\n\r\n### tokenIsExpired\r\n\r\nIndicates whether the token is expired or not.\r\n\r\n## Notes\r\n\r\nThe authenticator always requests the 'profile' OAuth2 scope, in addition to\r\nwhatever scopes are specified in the call to `run`.\r\n\r\nFor the popup window to send the auth token returned by google back to the main\r\nwindow, a global callback function is attached to the main window, called\r\n`authenticatedWith`. Including the `google-oauther` module will attach this\r\ncallback function automatically; overwriting this function will break the\r\nauthenticator.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}